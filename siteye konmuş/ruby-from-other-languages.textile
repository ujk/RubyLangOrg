Ruby koduna ilk baktığınızda daha önce kullandığınız başka programlama 
dillerine benzetebilirsiniz. Bu bilerek yapılmıştır. Java, Perl veya 
Python kullanıcılarına deyimler tanıdık gelecektir. Eğer bunlardan 
birini kullanmışsanız işiniz çok kolay.

Bu belgede iki ana bölüm var. İlki _X_ dilinden Ruby'ye geçerken ne 
görmeyi beklediğiniz, ikincisi dlin ana özelliklerini ele alıp önceden 
bildiklerinizle karşılaştırır.

h2. Neler Değişiyor: _X Dilinden_ Ruby'ye
<r:children:each by="title">
* <r:link /></r:children:each>

h2. Önemli Dil Özellikleri ve Bazı İpuçları

Burada Ruby öğrenirken yardımcınız olacak ana Ruby özelliklerini 
görüyorsunuz.

h3. Yineleme (Iteration)

İki Ruby özelliğini daha önce görmüşsünüzdür ama Ruby'de farklı bir 
davranış gösterirler, bloklar ve yineleyiciler. Bir index üzerinden döngü 
yapmak (C, C++ ve 1.5 öncesi Java daki gibi) veya bir liste üzerinde 
döngü yapmak (Perl'ün <tt>for (@a) {...}</tt> veya Python'un
<tt>for i in aList: ...</tt>) yerine Ruby ile genellikle şöyle birşey 
görürsünüz:  

<notextile><r:code>
some_list.each do |this_item|
  # Burası blok içi.
  # this_item ile çalışan kodlar buradadır.
end
</r:code></notextile>

@each@ (ve arkadaşları @collect@, @find@, @inject@, @sort@, vs.) 
hakkında daha fazla bilgi için komut satırında @ri Enumerable@ (ve 
sonrasında <tt>ri Enumerable#<i>func_name</i></tt>) yazabilirsiniz.

h3. Herşeyin Bir Değeri Vardır
  
Bir eşitlik ve bir deyim satırı arasında fak yoktur. Herşey *nil* de
olsa bir değer geri döner. Şu mümkündür:

<notextile><r:code>
x = 10
y = 11
z = if x < y
  true
else
  false
end
z # => true
</r:code></notextile>

h3. Semboller Sıradan Stringler Değildir

Ruby'ye yeni başlayan birçok kişi Sembollerin ne olduğunu ve ne için 
kullanıldıklarını anlamakta zorlanır. 
  
Semboller en iyi kimlikler olarak açıklanabilir. Bir sembolle ilgili 
sorulacak olan *ne* olduğu değil *kim* olduğudur. Konsalda <code>irb</code> 
girin ve farkı görelim: 
  
<notextile><r:code>
irb(main):001:0> :george.object_id == :george.object_id
=> true
irb(main):002:0> "george".object_id == "george".object_id
=> false
irb(main):003:0>
</r:code></notextile>
  
<code>object_id</code> metodu bir nesnenin tanımlama kodunu geri döner. Eğer 
iki nesne birbirine eşitse <code>object_id</code> leri de eşit olacaktır. 
Bunun anlamı ikisi de hafıza da aynı yeri işaret ediyor demektir. 
  
Gördüğünüz gibi bir sembol ilk defa kullanıldıktan sonra aynı karakterler 
her zaman hafızada aynı yeri gösterir. Yani <code>object_id</code>leri 
aynıdır.
  
Şimdi de ("george") stringine bakalım. <code>object_id</code>leri aynı 
değil. Bunun anlamı hafızada ayrı iki nesneyi işaret etmekte olmalarıdır. 
Her nezaman yeni bir string üretirseniz Ruby onun için bir hafıza ayırır.
  
Eğer nerede sembol nerede string kullanacağınızdan emin değilseniz, kimliği 
mi (örn. Hash key) yoksa içeriği mi size gerekli (yukardaki "gearge" gibi)
ona göre değerlendirin.

h3. Herşey bir Nesnedir

"Herşey bir nesnedir" lafı diğer dillerdeki gibi abartı bir laf değildir. 
Sınıflar gibi tamsayılar da bir nesnedir ve diğer nesnelerle yaptığınız 
herşeyi onlarla da yapabilirsiniz:

<notextile><r:code>
# class MyClass
#   attr_accessor :instance_var
# end
# Koduyla aynı anlama gelen bir kod
MyClass = Class.new do
  attr_accessor :instance_var
end
</r:code></notextile>


h3. Değişken Sabitler

Sabitler tam olarak sabit değil. Eğer halihazırda değeri verilmiş bir 
sabiti değiştirmeye kalkarsanız bir uyarı mesajı üretir ama çalışmayı 
durdurmaz. 



h3. İsimlendirme Gelenekleri

Ruby bazı isimlendirme geleneklerine zorlar. Eğer bir isim büyük harfle 
başlıyorsa, o bir sabittir. Eğer bir dolar işaretiyle başlıyorsa ($), 
bu bir global değişkendir. Eğer <code>@</code> işaretiyle başlıyorsa bu 
bir oluşum değişkenidir. Eğer <code>@@</code> ile başlıyorsa bu bir sınıf 
değişkenidir.

Metod isimleri de büyük harfle başlayabilir. Bu aşağıdaki gibi bir 
karışıklığa sebep olabilir:

<notextile><r:code>
Constant = 10
def Constant
  11
end
</r:code></notextile>
  
Burada <code>Constant</code> 10 değerindeyken <code>Constant()</code> değeri 11 dir.



h3. Sahte İsimli Parametreler

Ruby Python'dakine benzer isimli parametrelere sahip değildir. Bunun yerine 
hash ve semboller kullanarak taklidi yapılır. Ruby on Rails'de çok sık 
kullanılır. Örneğin:
  
<notextile><r:code>
def some_keyword_params( params )
  params
end
some_keyword_params( :param_one => 10, :param_two => 42 )
# => {:param_one=>10, :param_two=>42}
</r:code></notextile>
  
h3. Evrensel Doğruluk

Ruby'de *nil* ve *false* dışında herşey doğru kabul edilir. C, Python 
ve diğer birçok dilde 0 ve boş listeler gibi diğer bazı değerler 
yanlış kabul edilir. Aşağıdaki Python koduna bakın (diğer dillere de 
çevrilebilir):
  
<notextile><r:code>
# Python'da
if 0:
  print "0 is true"
else:
  print "0 is false"
</r:code></notextile>
  
Bunu çıktısı "0 is false" olacaktır. Ruby karşılığı ise:
  
<notextile><r:code>
# Ruby'de
if 0
  puts "0 is true"
else
  puts "0 is false"
end
</r:code></notextile>
  
"0 is true" çıktısı verecektir.



h3. Erişim Belirleyicileri Kısım Sonuna Kadar Geçerlidir

Aşağıdaki Ruby kodunda,
  
<notextile><r:code>
class MyClass
  private
  def bir_metod; true; end
  def diger_metod; false; end
end
</r:code></notextile>
  
<code>diger_metod</code> erişiminin genel olacağını düşünebilirsiniz 
ama öyle değil. "privete" erişim belirleyici sınıf tanımı sonuna kadar 
veya başka bir erişim belirleyici satıra kadar geçerli olacaktır. 
Default olarak tüm metodlar "public"(genel erişim)dir:
  
<notextile><r:code>
class MyClass
  # Şimdi a_method public erişim
  def a_method; true; end

  private

  # another_method private erişim
  def another_method; false; end
end
</r:code></notextile>
  
<code>public</code>, <code>private</code> ve <code>protected</code> 
aslında metoddur ve bu yüzden parametre alabilirler. Eğer bunlara bir 
sembol gönderirseniz metodun görünrlüğü değişir.


h3. Metod Erişimleri
  
<p>Java'da, <code>public</code> metoda herkes erişebilir demektir.  <code>protected</code> sınıfın oluşumlarından, türetilmiş sınıfların 
oluşumlarından ve aynı paket içersindeki sınıfların oluşumlarından 
erişilebilir demektir. <code>private</code> ise sınıfın oluşumlarından 
başka kimse metoda ulaşamaz demektir.</p>

Ruby biraz farklılık gösterir. <code>public</code> doğal olarak herkese açık 
demektir. <code>private</code> ise metodun belirlenmiş alıcısı varsa 
erişilebileceğini belirtir ve bu alıcı sadece *self* olabilir.

<code>protected</code> incelenmesi gereken birşey. Bir protected metod
sınıfın yada türetilmiş sınıfın oluşumlarından çağrılabilir, ayrıca diğer oluşum 
üzerinden çağrılabilir. 

Örnek, "Ruby FAQ":http://faq.rubygarden.org/entry/show/57?controller_prefix=faq%2F alınmıştır:

<notextile><r:code>
$ irb
irb(main):001:0> class Test
irb(main):002:1>   # default olarak public
irb(main):003:1*   def func
irb(main):004:2>     99
irb(main):005:2>   end
irb(main):006:1> 
irb(main):007:1*   def ==(diger)
irb(main):008:2>     func == diger.func
irb(main):009:2>   end
irb(main):010:1> end
=> nil
irb(main):011:0> 
irb(main):012:0* t1 = Test.new
=> #<Test:0x34ab50>
irb(main):013:0> t2 = Test.new
=> #<Test:0x342784>
irb(main):014:0> t1 == t2
=> true
irb(main):015:0> # şimdi `func` u protected yapalım, hala çalışıyor
irb(main):016:0* # çünkü protexted diğerine referansa izin veriyor
irb(main):017:0* class Test
irb(main):018:1>   protected :func
irb(main):019:1> end
=> Test
irb(main):020:0> t1 == t2
=> true
irb(main):021:0> # şimdi `func` u private yapalım
irb(main):022:0* class Test
irb(main):023:1>   private :func
irb(main):024:1> end
=> Test
irb(main):025:0> t1 == t2
NoMethodError: private method `func' called for #<Test:0x342784>
        from (irb):8:in `=='
        from (irb):25
        from :0
irb(main):026:0>
</r:code></notextile>



h3. Sınıflar Açıktır
  
Ruby sınıfları açıktır. İstediğiniz zaman açabilir, ekleme yapabilir, 
değiştirebilirsiniz. Core sınıfları bile, mesela <code>Fixnum</code> 
ve hatta tüm sınıfların anası <code>Object</code> sınıfı dahil. Ruby 
on Rails <code>Fixnum</code> sınıfına zamanla ilgili bir kısım metod 
eklemiştir. İzleyin:  
 
<notextile><r:code>
class Fixnum
  def hours
    self * 3600 # bir saat içindeki saniye miktarı
  end
  alias hour hours
end
  
# 1 Ocak saat 00:00 dan itibaren 14 saat sonra
# anca uyanmışsınız ;)
Time.mktime(2011, 01, 01) + 14.hours # => Sat Jan 01 14:00:00
</r:code></notextile>

 

h3. Eğlenceli Metod İsimleri 

Ruby'de metodların soru veya ünlem işareti ile bitmesine izin verilir. 
Gelenek olarak sorulara cevap veren metodlar (örnek, <tt>Array#empty?</tt> 
eğer alıcısı boşsa *true* döner) soru işareti ile biter. Tehlikeli sonuçları 
olabilecek metodlar (örneğin "kendi"ni değiştiren metodlar, <code>exit!</code> 
gibi) ünlem işareti ile bitirilirler.  
  
Argümanlarını değiştiren tüm metodlar ünlem işareti ile bitmayabilir. 
 <tt>Array#replace</tt> bir array'in içeriğini diğer biriyle değiştirir ama 
ünlemle bitmez.



h3. Özel Metodlar

Özel metodlar, tek nesneye özel metodlardır. Hangi nesne için tanımlandıysa 
onun için geçerlidir.
  
<notextile><r:code>
class Car
  def inspect
    "Ucuz araba"
  end
end

porsche = Car.new
porsche.inspect # => Ucuz araba
def porsche.inspect
  "Pahalı araba"
end

porsche.inspect # => Pahalı araba

# Diğer nesneler etkilenmez
other_car = Car.new
other_car.inspect # => Ucuz araba
</r:code></notextile>


h3. Kayıp Metodlar

Ruby bir metodu listesinde bulamayınca vazgeçmez, <code>method_missing</code> 
metodunu bulamadığı metod ismi ve argümanları ile çağırır. Normalde 
method_missing bir NameError hatası verir, fakat isterseniz bunu istediğiniz 
şekilde değiştirebilirsiniz ve birçok kütüphane de bunu yapar. Bir örnek: 
 
<notextile><r:code>
# id çağrılan metodun adı, * deyimiyle tüm argümanlar 
# bir 'arguments' adlı bir array içinde toplanır
def method_missing( id, *arguments )
  puts "Metod #{id} çağrıldı fakat bulunamadı. Argümanları " + 
       "şunlar : #{arguments.join(", ")}"
end

__ :a, :b, 10
# => Metod __ çağrıldı fakat bulunamadı. Argümanları 
# şunlar: a, b, 10
</r:code></notextile>

Yukardaki kod sadece çağrının detaylarını çağırır, fakat siz bu mesajı istediğiniz gibi değiştirmekte serbestsiniz.



h3. Fonksiyon Çağrısı Değil Mesaj İletimi

Bir metod çağrısı aslında diğer bir nesneye bir *mesaj* dır:

<notextile><r:code>
# Bununla
1 + 2
# Bu aynıdır ...
1.+(2)
# Bu da aynıdır:
1.send "+", 2
</r:code></notextile>

h3. Bloklar Nesnedir, Sadece Henüz Bunu Bilmiyorlar

Bloklar (çevrili kodlar) standart kütüphaneler tarafından çok kullanılır.
Bir bloğu çağırmak için @yield@ da kullanabilirsiniz, argüman listesinde 
özel bir argüman ekleyerek @Proc@ da yapabilirsiniz. Şöyleki:

<notextile><r:code>
def block( &the_block )
  # Burada the_block metoda gönderilen bloktur
  the_block # bloğu geri döndür
end
adder = block { |a, b| a + b }
# burada adder şimdi bir Proc nesnesidir
adder.class # => Proc
</r:code></notextile>
  
Blokları metod çağrıları dışında da Proc.new ile veya <code>lambda</code> 
metodu ile üretebilirsiniz
  
Benzer olarak metodlar da birer nesnedir:

<notextile><r:code>
method(:puts).call "puts is an object!"
# => puts is an object!
</r:code></notextile>

h3. Operatörler de Deyimdir

Ruby'deki operatörler birbirlerine belli öncelikleri olan metodlardır. Bu yüzden 
isterseniz Fixnum'un + metodunu değiştirebilirsiniz:
  
<notextile><r:code>
class Fixnum
  # Yapabilirsiniz ama lütfen bunu yapmayın
  def +( other )
    self - other
  end
end
</r:code></notextile>
  
C++'ın <code>operator+</code> sına ihtiyacınız yok.
  
Array stili bir erişim için <code>[]</code> ve <code>[]=</code> metodları 
tanımlayabilirsiniz. (+1 ve -2 deki gibi) işaretler için <code>+@</code> 
ve <code>-@</code> metodlarını tanımlamalısınız.
  
Aşağıdaki operatörler bu şekilde değerlendirilmezler. Bunlar metod değildir 
ve tekrar tanımlanamazlar:

<notextile><r:code lang="symbols">  
=, .., ..., !, not, &&, and, ||, or, !=, !~, ::
</r:code></notextile>

Ek olarak, +=, *= vb. şunların kısaltmasıdır : 
<code>var = var + other_var</code>, <code>var = var * other_var</code>, vb. ve 
bu yüzden tekrar tanımlanamazlar.


h2. Daha Fazla Bilgi

Daha fazla bilgiye ihtiyaç duyarsanız  "Belgeler":/tr/documentation/ bölümüne bakınız.
