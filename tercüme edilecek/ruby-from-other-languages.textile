 
When you first look at some Ruby code, it will likely remind you of other
programming languages you've used. This is on purpose. Much of the
syntax is familiar to users of  Perl, Python, and Java (among other
languages), so if you've used those, learning Ruby will be a piece of cake.

This document contains two major sections. The first attempts
to be a rapid-fire summary of what you can expect to see when going
from language _X_ to Ruby. The second section tackles the major
language features and how they might compare to what you're already
familiar with.

h2. What to Expect: _Language X_ to Ruby
<r:children:each by="title">
* <r:link /></r:children:each>

h2. Important Language Features And Some Gotchas

Here are some pointers and hints on major Ruby features you'll
see while learning Ruby.

h3. Iteration

Two Ruby features that are a bit unlike what you may have seen before,
and which take some getting used to, are "blocks" and iterators. Instead
of looping over an index (like with C, C++, or pre-1.5 Java),
or looping over a list (like Perl's <tt>for (@a) {...}</tt>, or Python's
<tt>for i in aList: ...</tt>), with Ruby you'll very often instead see

<notextile><r:code>
some_list.each do |this_item|
  # We're inside the block.
  # deal with this_item.
end
</r:code></notextile>

For more info on @each@ (and it's friends @collect@, @find@, @inject@, @sort@, etc.),
see @ri Enumerable@ (and then <tt>ri Enumerable#<i>func_name</i></tt>).

h3. Everything has a value
  
There's no difference between an expression and a statement. Everything has a value,
even if that value is *nil*. This is possible:

<notextile><r:code>
x = 10
y = 11
z = if x < y
  true
else
  false
end
z # => true
</r:code></notextile>

h3. Symbols are not lightweight Strings

Many Ruby newbies struggle with understanding what Symbols are, and what they can
be used for.
  
Symbols can best be described as identities. A symbol is all about *who* it is,
not *what* it is. Fire up <code>irb</code> and see the difference:
  
<notextile><r:code>
irb(main):001:0> :george.object_id == :george.object_id
=> true
irb(main):002:0> "george".object_id == "george".object_id
=> false
irb(main):003:0>
</r:code></notextile>
  
The <code>object_id</code> methods returns the identity of an Object. If two
objects have the same <code>object_id</code>, they are the same (point to the
same Object in memory).
  
As you can see, once you have used a Symbol once, any Symbol with the same
characters references the same Object in memory. For any given two Symbols that
represent the same characters, the <code>object_id</code>s match.
  
Now take a look at the String ("george"). The <code>object_id</code>s don't
match. That means they're referencing two different objects in memory.
Whenever you use a new String, Ruby allocates memory for it.
  
If you're in doubt whether to use a Symbol or a String, consider what's more
important: the identity of an object (i.e. a Hash key), or the contents (in
the example above, "george").


h3. Everything is an Object

"Everything is an object" isn't just hyperbole. Even classes and integers are
objects, and you can do the same things with them as with any other object:

<notextile><r:code>
# This is the same as
# class MyClass
#   attr_accessor :instance_var
# end
MyClass = Class.new do
  attr_accessor :instance_var
end
</r:code></notextile>


h3. Variable Constants

Constants are not really constant. If you modify an already initialized constant,
it will trigger a warning, but not halt your program. That isn't to say you
*should* redefine constants, though.



h3. Naming conventions

Ruby enforces some naming conventions. If an identifier starts with a capital letter,
it is a constant. If it starts with a dollar sign ($), it is a global variable. If
it starts with <code>@</code>, it is an instance variable. If it starts with <code>@@</code>,
it is a class variable.

Method names, however, are allowed to start with capital letters. This can lead to
confusion, as the example below shows:

<notextile><r:code>
Constant = 10
def Constant
  11
end
</r:code></notextile>
  
Now <code>Constant</code> is 10, but <code>Constant()</code> is 11.



h3. Fake keyword parameters

Ruby doesn't have keyword parameters, like Python has. However, it can be faked by
using symbols and hashes. Ruby on Rails, among others, uses this heavily. Example:
  
<notextile><r:code>
def some_keyword_params( params )
  params
end
some_keyword_params( :param_one => 10, :param_two => 42 )
# => {:param_one=>10, :param_two=>42}
</r:code></notextile>
  
h3. The universal truth

In Ruby, everything except *nil* and *false* is considered true. In C, Python and
many other languages, 0 and possibly other values, such as empty lists, are consided
false. Take a look at the following Python code (the example applies to other languages,
too):
  
<notextile><r:code>
# in Python
if 0:
  print "0 is true"
else:
  print "0 is false"
</r:code></notextile>
  
This will print "0 is false". The equivalent Ruby:
  
<notextile><r:code>
# in Ruby
if 0
  puts "0 is true"
else
  puts "0 is false"
end
</r:code></notextile>
  
Prints "0 is true".



h3. Access modifiers apply until the end of scope

In the following Ruby code,
  
<notextile><r:code>
class MyClass
  private
  def a_method; true; end
  def another_method; false; end
end
</r:code></notextile>
  
You might expect <code>another_method</code> to be public. Not so. The 'private' access
modifier continues until the end of the scope, or until another access modifier
pops up, whichever comes first. By default, methods are public:
  
<notextile><r:code>
class MyClass
  # Now a_method is public
  def a_method; true; end

  private

  # another_method is private
  def another_method; false; end
end
</r:code></notextile>
  
<code>public</code>, <code>private</code> and <code>protected</code> are really methods,
so they can take parameters. If you pass a Symbol to one of them, that method's visibility
is altered.



h3. Method access
  
<p>In Java, <code>public</code> means a method is accessible by anyone. <code>protected</code>
means the class's instances, instances of descendant classes, and instances of classes in the same package
can access it, but not anyone else, and <code>private</code> means nobody besides the classes instances 
can access the method.</p>

Ruby differs slightly. <code>public</code> is, naturally, public. <code>private</code> means
the method(s) are accessible only when they can be called without an explicit receiver. Only *self* is
allowed to be the receiver of a private method call.

<code>protected</code> is the one to be on the lookout for. A protected method can be called
from a class or descendant class instances, but also with another instance as its receiver.

Example, adapted from the "Ruby FAQ":http://faq.rubygarden.org/entry/show/57?controller_prefix=faq%2F:

<notextile><r:code>
$ irb
irb(main):001:0> class Test
irb(main):002:1>   # public by default
irb(main):003:1*   def func
irb(main):004:2>     99
irb(main):005:2>   end
irb(main):006:1> 
irb(main):007:1*   def ==(other)
irb(main):008:2>     func == other.func
irb(main):009:2>   end
irb(main):010:1> end
=> nil
irb(main):011:0> 
irb(main):012:0* t1 = Test.new
=> #<Test:0x34ab50>
irb(main):013:0> t2 = Test.new
=> #<Test:0x342784>
irb(main):014:0> t1 == t2
=> true
irb(main):015:0> # now make `func` protected, still works
irb(main):016:0* # because protected allows the other reference
irb(main):017:0* class Test
irb(main):018:1>   protected :func
irb(main):019:1> end
=> Test
irb(main):020:0> t1 == t2
=> true
irb(main):021:0> # now make `func` private
irb(main):022:0* class Test
irb(main):023:1>   private :func
irb(main):024:1> end
=> Test
irb(main):025:0> t1 == t2
NoMethodError: private method `func' called for #<Test:0x342784>
        from (irb):8:in `=='
        from (irb):25
        from :0
irb(main):026:0>
</r:code></notextile>



h3. Classes are open
  
Ruby classes are open. You can open them up, add to them, and change them
at any time. Even core classes, like <code>Fixnum</code> or even
<code>Object</code>, the parent of all objects. Ruby on Rails defines a
bunch of methods for dealing with time on <code>Fixnum</code>. Watch:
 
<notextile><r:code>
class Fixnum
  def hours
    self * 3600 # number of seconds in an hour
  end
  alias hour hours
end
  
# 14 hours from 00:00 January 1st
# (aka when you finally wake up ;)
Time.mktime(2006, 01, 01) + 14.hours # => Sun Jan 01 14:00:00
</r:code></notextile>



h3. Funny method names

In Ruby, methods are allowed to end with question marks or exclamation marks.
By convention, methods that answer questions (i.e. <tt>Array#empty?</tt>
returns *true* if the receiver is empty) end in question marks. Potentially
"dangerous" methods (ie methods that modify *self* or the arguments,
<code>exit!</code> etc.) by convention end with exclamation marks.
  
All methods that change their arguments don't end with exclamation marks,
though. <tt>Array#replace</tt> replaces the contents of an array with the contents
of another array. It doesn't make much sense to have a method like that
that *doesn't* modify self.



h3. Singleton methods

Singleton methods are per-object methods. They are only available on the
Object you defined it on.
  
<notextile><r:code>
class Car
  def inspect
    "Cheap car"
  end
end

porsche = Car.new
porsche.inspect # => Cheap car
def porsche.inspect
  "Expensive car"
end

porsche.inspect # => Expensive car

# Other objects are not affected
other_car = Car.new
other_car.inspect # => Cheap car
</r:code></notextile>


h3. Missing methods

Ruby doesn't give up if it can't find a method that responds to a particular
message. It calls the <code>method_missing</code> method with the name of the method
it couldn't find and the arguments. By default, method_missing raises a
NameError exception, but you can redefine it to better fit your application,
and many libraries do. Here is an example:
 
<notextile><r:code>
# id is the name of the method called, the * syntax collects
# all the arguments in an array named 'arguments'
def method_missing( id, *arguments )
  puts "Method #{id} was called, but not found. It has " + 
       "these arguments: #{arguments.join(", ")}"
end

__ :a, :b, 10
# => Method __ was called, but not found. It has these
# arguments: a, b, 10
</r:code></notextile>

The code above just prints the details of the call, but you are free to handle the message in any way that is appropriate.



h3. Message passing, not function calls

A method call is really a *message* to another object:

<notextile><r:code>
# This
1 + 2
# Is the same as this ...
1.+(2)
# Which is the same as this:
1.send "+", 2
</r:code></notextile>

h3. Blocks are Objects, they just don't know it yet

Blocks (closures, really) are heavily used by the standard library. To call a
block, you can either use @yield@, or make it a @Proc@ by appending a special
argument to the argument list, like so:

<notextile><r:code>
def block( &the_block )
  # Inside here, the_block is the block passed to the method
  the_block # return the block
end
adder = block { |a, b| a + b }
# adder is now a Proc object
adder.class # => Proc
</r:code></notextile>
  
You can create blocks outside of method calls, too, by calling Proc.new with
a block or calling the <code>lambda</code> method.
  
Similarly, methods are also Objects in the making:

<notextile><r:code>
method(:puts).call "puts is an object!"
# => puts is an object!
</r:code></notextile>

h3. Operators are syntactic sugar

Most operators in Ruby are just syntactic sugar (with some precedence rules) for method calls. You can, for example, override Fixnums + method:
  
<notextile><r:code>
class Fixnum
  # You can, but please don't do this
  def +( other )
    self - other
  end
end
</r:code></notextile>
  
You don't need C++'s <code>operator+</code>, etc.
  
You can even have array-style access if you define the <code>[]</code> and <code>[]=</code>
methods. To define the unary + and - (think +1 and -2), you must define the
<code>+@</code> and <code>-@</code> methods, respectively.
  
The operators below are *not* syntactic sugar, though. They are not methods, 
and cannot be redefined:

<notextile><r:code lang="symbols">  
=, .., ..., !, not, &&, and, ||, or, !=, !~, ::
</r:code></notextile>

In addition, +=, *= etc. are just abbrevations for
<code>var = var + other_var</code>, <code>var = var * other_var</code>, etc. and therefore
cannot be redefined.


h2. Finding Out More

When you are ready for more Ruby knowledge, see our "Documentation":/en/documentation/ section.