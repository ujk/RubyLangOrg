Perl çok iyidir. Perl'ün dökümantasyonu çok iyidir. Perl'ün topluluğu ... 
çok iyidir. Ancak bu dil biraz kalabalık ve karmaşıktır. Bu yüzden az 
zaman harcayan, daha belirli çizgileri olan ve başından beri eşsiz OO 
özellikleri olan bir dilin hasretini çeken Perl'cüler için Ruby uygun 
olabilir.

h3. Benzerlikler

Perl'de olduğu gibi Ruby'de de,...
* CPAN benzeri bir paket yönetim sistemi vardır ("RubyGems":http://docs.rubygems.org/)
* Regex'ler içine gömülüdür. Bon app&eacute;tit!
* Birçok sık kullanılan özellik içinde gömülüdür.
* Parantezler çoğunlukla isteğe bağlıdır
* String'ler aynı şekilde çalışır.
* Perl gibi string ve regex belirleme yapıları vardır. (@%q{bu (tek-tırnak)}@, veya 
@%Q{bu (çift-tırnaklı)}@, ve @%w{bu tek-tırnaklı kelime listesi}@ gibi. İsterseniz @%Q|bunu|@ 
@%Q(veya)@ @%Q^diğer bir^@ sınırlayıcıyı da kullanabilirsiniz).
* Çift tırnak içinde değişken değerlerine @"bu #{şekilde}"@ erişebilirsiniz. 
(Ayrıca bu @#{}@ içine Ruby kodu da koyabilirsiniz. 
* Shell command expansion uses `backticks`.
* Gömülü döküman aracı vardır (Ruby'ninki RDoc olarak adlandırılmıştır).

h3. Farklar

Ruby'de Perl'den farklı olarak,...
* Perl'deki gibi içeriğe bağlı kurallar yoktur.
* Bir değişken gösterdiği nesne ile aynı şey değildir. Sadece nesneye referans verir. 
* @$@ ve <tt>@</tt> karakterleri bazen değişken isminin ilk harfi olarak kullanılabilir. 
Ama bunlar tipi değil bakış açısını belirtir. (global değişkenler @$@ ile başlar, nesne 
oluşum değişkenleri <tt>@</tt> ile başlar ve nesne özellikleri <tt>@@</tt> ile başlar).
* Array değerleri parantezler yerine köşeli parantezler içinde gösterilir.
* Composing lists of other lists does not flatten them into one big list.
Instead you get an array of arrays.
* It's @def@ instead of @sub@.
* There's no semicolons needed at the end of each line. Incidentally, you end things like
function definitions, class definitions, and case statements with the @end@ keyword.
* Objects are strongly typed. You'll be manually calling @foo.to_i@, @foo.to_s@, etc.,
if you need to convert between types.
* There's no @eq@, @ne@, @lt@, @gt@, @ge@, nor @le@.
* There's no diamond operator. You usually use <tt>IO.<i>some_func</i></tt> instead.
* The fat comma is only used for hash literals.
* There's no @undef@. In Ruby you have @nil@. @nil@ is an object (like anything else
in Ruby). It's not the same as an undefined variable. It evaluates to @false@ if you
treat it like a boolean.
* When tested for truth, only @false@ and @nil@ evaluate to a false value. Everything else
is true (including @0@, @0.0@, and @"0"@).
* There's no "PerlMonks":http://www.perlmonks.org/. Though the ruby-talk mailing
list is a very helpful place. 
